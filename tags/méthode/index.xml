<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Méthode on Accueil</title>
    <link>https://dlatreyte.github.io/tags/m%C3%A9thode/</link>
    <description>Recent content in Méthode on Accueil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Wed, 13 Jan 2021 19:12:34 +0400</lastBuildDate><atom:link href="https://dlatreyte.github.io/tags/m%C3%A9thode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exercices de programmation objet</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-4/6-exercices/</link>
      <pubDate>Wed, 13 Jan 2021 19:12:34 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-4/6-exercices/</guid>
      <description>Chaque méthode définie devra être accompagnée de sa spécification. Manipulation de points On considère la classe nommée Point ayant les attributs suivants :
__abs : attribut privé de type float pour représenter l&amp;rsquo;abscisse du point ; __ord : attribut privé de type float pour représenter l&amp;rsquo;ordonnée du point. Définir la class Point et le constructeur __init__ permettant d&amp;rsquo;initialiser les deux attributs. L&amp;rsquo;encapsulation est un concept fondamental de la conception objet.</description>
    </item>
    
    <item>
      <title>Jeu de la vie</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-4/5-jeu-vie/</link>
      <pubDate>Sun, 04 Oct 2020 04:35:40 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-4/5-jeu-vie/</guid>
      <description>Le but de ce sujet est de réaliser en Python une implémentation du jeu de la vie en utilisant la programmation objet.
Un automate cellulaire consiste en une grille régulière de « cellules » contenant chacune un « état » choisi parmi un ensemble fini et qui peut évoluer au cours du temps. L&amp;rsquo;état d&amp;rsquo;une cellule au temps $t+1$ est fonction de l&amp;rsquo;état au temps $t$ d&amp;rsquo;un nombre fini de cellules appelé son « voisinage ».</description>
    </item>
    
    <item>
      <title>Résoudre un problème grâce aux paradigmes objet et fonctionnel</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-4/4-fonction/</link>
      <pubDate>Thu, 01 Oct 2020 04:21:17 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-4/4-fonction/</guid>
      <description>L&amp;rsquo;objectif de ce document est d&amp;rsquo;illustrer une fois encore l&amp;rsquo;intérêt des différents paradigmes de programmation.
Cas d&amp;rsquo;étude : fonction avec paramètres On considère l&amp;rsquo;équation qui traduit le mouvement d&amp;rsquo;une balle lancée verticalement vers le haut avec une vitesse $\vec{v}_0$ depuis l&amp;rsquo;origine des altitudes telle que l&amp;rsquo;écrit un physicien : $$y(t) = -\dfrac{1}{2}g\, t^2 + v_0\, t$$ Ce physicien a donc tendance à considérer que $y$ est une fonction de la variable $t$ et que cette fonction dépend des paramètres $v_0$ et $g$.</description>
    </item>
    
    <item>
      <title>Méthodes spéciales en Python</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-4/3-exercices/</link>
      <pubDate>Tue, 29 Sep 2020 09:51:52 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-4/3-exercices/</guid>
      <description>Définit une classe nommée Fraction pour représenter les nombres rationnels. Cette classe doit posséder deux attributs num et denom, de type entier, qui représentent respectivement le numérateur et le dénominateur du nombre rationnel.
On demande que le dénominateur soit un entier positif.
Un corrigé de cette activité se trouve à cette adresse : https://repl.it/@dlatreyte/fraction Écrire le constructeur de cette classe. Une exception de type ValueError doit être levée si le dénominateur n&amp;rsquo;est pas un nombre entier positif.</description>
    </item>
    
    <item>
      <title>Simulation du fonctionnement d&#39;une banque</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-4/2-banque/</link>
      <pubDate>Sat, 26 Sep 2020 20:06:58 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-4/2-banque/</guid>
      <description>L&amp;rsquo;objectif de ce document est de simuler (sommairement bien sûr) le fonctionnement d&amp;rsquo;une banque. Le programme doit permettre :
La création d&amp;rsquo;une banque ; La création de comptes bancaires ; La création de personnes propriétaires de ces comptes bancaires. Une correction se trouve à cette adresse : https://repl.it/@dlatreyte/banque Classe Personne Dans un module nommé personne, créer la classe Personne dont la spécification est la suivante :
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Personne(): &amp;#34;&amp;#34;&amp;#34; Modélisation d&amp;#39;une personne.</description>
    </item>
    
    <item>
      <title>Programmation Objet</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-4/1-programmation-objet/</link>
      <pubDate>Wed, 23 Sep 2020 21:07:12 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-4/1-programmation-objet/</guid>
      <description>Programmation orientée objet Un objet est une instance d&amp;rsquo;une classe. L&amp;rsquo;un des objectifs principaux de la notion d&amp;rsquo;objet est d&amp;rsquo;organiser des programmes complexes grâce aux notions :
d&amp;rsquo;encapsulation ; d&amp;rsquo;abstraction ; d&amp;rsquo;héritage ; de polymorphisme ; Remarque : Seules les deux premières notions apparaissent dans le programme de NSI.
Encapsulation Le principe de l&amp;rsquo;encapsulation est de regrouper dans le même objet, les données (attributs) et les traitements (méthodes) qui lui sont spécifiques.</description>
    </item>
    
  </channel>
</rss>
