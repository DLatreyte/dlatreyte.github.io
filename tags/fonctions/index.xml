<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fonctions on Accueil</title>
    <link>https://dlatreyte.github.io/tags/fonctions/</link>
    <description>Recent content in Fonctions on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sun, 29 Aug 2021 16:36:24 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/tags/fonctions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tester ses fonctions avec &#39;assert&#39;</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-05/2-assert/</link>
      <pubDate>Sun, 29 Aug 2021 16:36:24 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-05/2-assert/</guid>
      <description>&lt;p&gt;Dans le document 5,1, nous avons insisté sur l&amp;rsquo;importance de la spécification d&amp;rsquo;une fonction et sur celle d&amp;rsquo;un jeu de tests.&lt;br&gt;&#xA;Dans ce document, nous allons découvrir une nouvelle façon de tester ses fonctions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;le-mot-clé-assert&#34;&gt;Le mot clé &lt;code&gt;assert&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Le mot clé &lt;code&gt;assert&lt;/code&gt; est utilisé afin de s&amp;rsquo;assurer de la robustesse d&amp;rsquo;une fonction. &lt;em&gt;Il ne doit jamais être utilisé au sein d&amp;rsquo;un programme pour lever une exception&lt;/em&gt; ; il ne faut donc pas le confondre avec le mot clé &lt;code&gt;raise&lt;/code&gt;.&lt;br&gt;&#xA;Placé dans la zone de test du programme,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Récursivité sur les entiers</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-1-recursivite-sur-entiers/</link>
      <pubDate>Sat, 05 Sep 2020 18:34:00 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-1-recursivite-sur-entiers/</guid>
      <description>&lt;center&gt;&#xA;&lt;h3&gt;To understand recursion, you must first understand recursion.&lt;/h3&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;La &lt;strong&gt;récurrence&lt;/strong&gt; est un &lt;em&gt;raisonnement mathématique&lt;/em&gt; courant et parmi les plus puissants pour démontrer des théorèmes ou construire des objets. Par exemple, on l&amp;rsquo;utilise dans un cours de mathématique de lycée pour montrer que :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pour tout entier $n \geqslant 0$, on a : $1 + 2 + 3 + \ldots + n = \dfrac{n(n+1)}{2}$ ;&lt;/li&gt;&#xA;&lt;li&gt;Un entier naturel n&amp;rsquo;est autre que 0 ou le successeur d&amp;rsquo;un entier naturel (0 est 0, 1 est le successeur de 0, 2 est le successeur de 1, &amp;hellip;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;En programmation, on peut raisonner de façon identique, nous allons &lt;strong&gt;construire des fonctions et des structures de données (listes chaînées, arbres, etc.) à l&amp;rsquo;aide d&amp;rsquo;une hypothèse de récurrence et d&amp;rsquo;un point de départ&lt;/strong&gt;. &lt;strong&gt;Le déroulement de la récurrence sera quant à lui pris en charge par la machine&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Langages et programmation</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-02/chap-02/</link>
      <pubDate>Sat, 14 Sep 2019 21:37:45 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-02/chap-02/</guid>
      <description>&lt;h2 id=&#34;à-quoi-a-t-on-accès-lorsquon-utilise-un-langage-de-programmation-&#34;&gt;À quoi a-t-on accès lorsqu&amp;rsquo;on utilise un langage de programmation ?&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Un langage de programmation doit :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fournir des &lt;strong&gt;objets (ou types) primitifs&lt;/strong&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;posséder une bibliothèque de &lt;strong&gt;fonctions prédéfinies&lt;/strong&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;permettre la &lt;strong&gt;manipulation des objets primitifs et des fonctions prédéfinies&lt;/strong&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;établir des règles qui permettent de &lt;strong&gt;construire de nouveaux objets (ou types)&lt;/strong&gt; ou de nouvelles fonctions par &lt;em&gt;combinaison des types primitifs et des fonctions prédéfinies&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Nous allons aborder chacun de ces points.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
