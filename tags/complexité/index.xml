<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Complexité on Accueil</title>
    <link>https://dlatreyte.github.io/tags/complexit%C3%A9/</link>
    <description>Recent content in Complexité on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Fri, 24 Nov 2023 12:59:57 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/tags/complexit%C3%A9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tri par insertion</title>
      <link>https://dlatreyte.github.io/terminales-nsi/tris/2-tri-par-insertion/</link>
      <pubDate>Fri, 24 Nov 2023 12:59:57 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/tris/2-tri-par-insertion/</guid>
      <description>&lt;h2 id=&#34;tri-du-joueur-de-cartes&#34;&gt;Tri du joueur de cartes&lt;/h2&gt;&#xA;&lt;img src=&#34;../../terminales-nsi/tris/insertion/cartes.png&#34; alt=&#34;&#34; width=40% style=&#34;float: right; padding-left: 6px;&#34;&gt;&#xA;&lt;p&gt;Le tri par insertion est un tri « naturel » souvent qualifié de « tri du&#xA;joueur de carte ».&lt;br&gt;&#xA;Comment un joueur de carte trie-t-il ses cartes ?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Au début, la main gauche du joueur est vide et ses cartes sont posées sur la&#xA;table.&lt;/li&gt;&#xA;&lt;li&gt;Le joueur prend alors sur la table les cartes, une par une avec sa main&#xA;droite, pour les placer dans sa main gauche.&lt;/li&gt;&#xA;&lt;li&gt;Pour savoir où placer une carte dans son jeu, le joueur la compare avec&#xA;chacune des cartes déjà présentes dans sa main gauche, en examinant les cartes&#xA;de la droite vers la gauche.&lt;/li&gt;&#xA;&lt;li&gt;À tout moment, les cartes tenues par la main gauche sont triées ; ces cartes&#xA;étaient, à l&amp;rsquo;origine, les cartes situées au sommet de la pile sur la table.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Choisir sept cartes à jouer. Les placer en ligne au hasard sur une table et&#xA;mettre en œuvre la technique décrite ci-dessus.&lt;br&gt;&#xA;&lt;strong&gt;Se filmer pendant toute l&amp;rsquo;opération en commentant chacune des étapes !&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;tri-par-insertion&#34;&gt;Tri par insertion&lt;/h2&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;La méthode du tri par insertion est ilustré à &lt;a href=&#34;https://youtu.be/K4CuPzdiAIo&#34;&gt;cette adresse&lt;/a&gt;, ou, de façon plus folklorique, à &lt;a href=&#34;https://youtu.be/ROalU379l3U&#34;&gt;cette adresse&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tri par sélection</title>
      <link>https://dlatreyte.github.io/terminales-nsi/tris/1-tri-par-selection/</link>
      <pubDate>Fri, 24 Nov 2023 12:59:47 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/tris/1-tri-par-selection/</guid>
      <description>&lt;p&gt;&lt;em&gt;La recherche d&amp;rsquo;un élément dans un tableau est beaucoup plus efficace si ce&#xA;tableau est ordonné&lt;/em&gt;. À vrai dire, ce n&amp;rsquo;est pas en cours d&amp;rsquo;informatique que&#xA;vous avez découvert ceci : dans toutes les bibliothèques les livres sont&#xA;classés de façon à rendre leur recherche plus rapide !&lt;/p&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  Le tri des tableaux/listes permet de trouver rapidement les objets recherchés et facilite la recherche des valeurs extrêmes.&#xA;&lt;/div&gt;&#xA;&lt;p&gt;La question que se propose d&amp;rsquo;aborder ce document est donc : « comment classer les éléments d&amp;rsquo;un tableau selon une relation d&amp;rsquo;ordre donnée ? ».&lt;/p&gt;</description>
    </item>
    <item>
      <title>Les Files</title>
      <link>https://dlatreyte.github.io/terminales-nsi/piles-files/2-files/</link>
      <pubDate>Sat, 31 Oct 2020 22:50:06 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/piles-files/2-files/</guid>
      <description>&lt;h2 id=&#34;rappel--type-de-données-abstrait-tda&#34;&gt;Rappel : Type de Données Abstrait (TDA)&lt;/h2&gt;&#xA;&lt;p&gt;Une structure de données ou type de données abstrait est un &lt;em&gt;moyen d&amp;rsquo;organiser et de manipuler les données en mémoire&lt;/em&gt;. Un TDA est donc définit par :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Son nom ;&lt;/li&gt;&#xA;&lt;li&gt;Sa spécification, c&amp;rsquo;est à dire la liste des manipulations/opérations que l&amp;rsquo;on peut ou pas effectuer.&#xA;La spécification indique généralement la complexité de chacune des opérations prévues par le TDA.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;note warning&#34;&gt;&#xA;  Un type de données abstrait &lt;strong&gt;ne dépend pas&lt;/strong&gt; de la manière dont la structure de données est implémentée dans le langage de programmation utilisé.&lt;br&gt;&#xA;Un TDA peut être implémenté de plusieurs façons différentes.&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;quest-ce-quune-file-&#34;&gt;Qu&amp;rsquo;est-ce qu&amp;rsquo;une file ?&lt;/h2&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;p&gt;Une &lt;strong&gt;file&lt;/strong&gt; est une structure de données abstraite dans laquelle &lt;em&gt;les données sont organisées comme le seraient des personnes dans une &lt;strong&gt;file d&amp;rsquo;attente&lt;/strong&gt; (au guichet de la poste par exemple) :&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Les Piles</title>
      <link>https://dlatreyte.github.io/terminales-nsi/piles-files/1-piles/</link>
      <pubDate>Tue, 27 Oct 2020 03:40:03 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/piles-files/1-piles/</guid>
      <description>&lt;h2 id=&#34;rappelnbsp-type-de-données-abstrait-tda&#34;&gt;Rappel : Type de Données Abstrait (TDA)&lt;/h2&gt;&#xA;&lt;p&gt;Une structure de données ou type de données abstrait est un &lt;em&gt;moyen d&amp;rsquo;organiser et de manipuler les données en mémoire&lt;/em&gt;. Un TDA est donc définit par :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Son nom ;&lt;/li&gt;&#xA;&lt;li&gt;Sa spécification, c&amp;rsquo;est à dire la liste des manipulations/opérations que l&amp;rsquo;on peut ou pas effectuer.&#xA;La spécification indique généralement la complexité de chacune des opérations prévues par le TDA.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;note warning&#34;&gt;&#xA;  Un type de données abstrait &lt;strong&gt;ne dépend pas&lt;/strong&gt; de la manière dont la structure de données est implémentée dans le langage de programmation utilisé.&lt;br&gt;&#xA;Un TDA peut être implémenté de plusieurs façons différentes.&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;quest-ce-quune-pile-&#34;&gt;Qu&amp;rsquo;est-ce qu&amp;rsquo;une pile ?&lt;/h2&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;p&gt;Une &lt;strong&gt;pile&lt;/strong&gt; est une structure de données abstraite dans laquelle &lt;em&gt;les données sont organisées comme le seraient des assiettes dans une pile d&amp;rsquo;assiettes contenue dans une boite de profondeur quelconque mais étroite&lt;/em&gt; (ce qui empêche de manipuler les assiettes par le côté).&lt;br&gt;&#xA;On peut donc seulement :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Listes Chaînées, présentation</title>
      <link>https://dlatreyte.github.io/terminales-nsi/listes-chainees/1-listes-chainees/</link>
      <pubDate>Wed, 14 Oct 2020 18:01:18 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/listes-chainees/1-listes-chainees/</guid>
      <description>&lt;h2 id=&#34;tableaux&#34;&gt;Tableaux&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;ul&gt;&#xA;&lt;li&gt;Un &lt;strong&gt;tableau&lt;/strong&gt; est une &lt;em&gt;structure de données&lt;/em&gt; dans laquelle &lt;em&gt;les éléments, tous de même type, occupent des positions contiguës en mémoire&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Le nombre d&amp;rsquo;éléments qu&amp;rsquo;un tableau peut contenir est déterminé à la création d&amp;rsquo;un tableau.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Type Python&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Type&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Opération&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Exemple&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Complexité&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;N&amp;rsquo;existe pas&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Tableau&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Accès à un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;tab[i]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(1)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Modification d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;tab[i] = x&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(1)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Effacement d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;retire(tab, i)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Insertion d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;insere(tab, x, i)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Recherche d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;est_dans(tab, x)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;ul&gt;&#xA;&lt;li&gt;La structure de données appelée « liste » dans le langage Python est implémentée à l&amp;rsquo;aide de &lt;strong&gt;tableaux dynamiques&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;Remarque :&lt;/strong&gt; Dans la suite de ce document, on va considérer que la liste Python &lt;code&gt;tab&lt;/code&gt;, créé par l&amp;rsquo;instruction &lt;code&gt;tab = [i for i in range(20)]&lt;/code&gt; est de longueur fixe. &lt;em&gt;Elle se comporte alors comme un tableau.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structures de données fournies avec le langage Python</title>
      <link>https://dlatreyte.github.io/terminales-nsi/types-abstraits/1-structures-integrees/</link>
      <pubDate>Tue, 13 Oct 2020 05:25:49 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/types-abstraits/1-structures-integrees/</guid>
      <description>&lt;p&gt;Python possède dans la bibliothèque standard un grand nombre de structures de données, programmées de manière efficace.&lt;/p&gt;&#xA;&lt;h2 id=&#34;rappels--modules-fonctions&#34;&gt;Rappels : modules, fonctions&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Pour chaque &lt;strong&gt;module&lt;/strong&gt;, on distingue :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;sa réalisation&lt;/strong&gt; (ou &lt;strong&gt;implémentation&lt;/strong&gt;) : c&amp;rsquo;est le code lui-même.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;son interface (API)&lt;/strong&gt; : c&amp;rsquo;est l&amp;rsquo;énumération des fonctions définies dans le module qui sont utilisées depuis d&amp;rsquo;autres modules/programmes, les &lt;strong&gt;clients&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;L&amp;rsquo;interface doit présenter une &lt;strong&gt;documentation&lt;/strong&gt; dans laquelle  &lt;strong&gt;tout ce que doit savoir le client doit être indiqué&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rappels d&#39;algorithmique</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-4-rappels-algorithmique/</link>
      <pubDate>Sat, 12 Sep 2020 17:46:07 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-4-rappels-algorithmique/</guid>
      <description>&lt;h2 id=&#34;algorithmique&#34;&gt;Algorithmique&lt;/h2&gt;&#xA;&lt;!--&#xA;### Introduction&#xA;--&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  Un &lt;strong&gt;algorithme&lt;/strong&gt; est une &lt;em&gt;suite finie et non ambiguë&#xA;d&amp;rsquo;opérations ou d&amp;rsquo;instructions&lt;/em&gt; à réaliser afin de résoudre un problème.&#xA;&lt;/div&gt;&#xA;&lt;p&gt;En informatique, pour qu&amp;rsquo;un algorithme puisse être implémenté, il est&#xA;nécessaire de s&amp;rsquo;assurer que la « suite finie et non ambiguë d&amp;rsquo;opérations ou&#xA;d&amp;rsquo;instructions à réaliser » s&amp;rsquo;effectue en une &lt;strong&gt;durée finie&lt;/strong&gt; .&lt;/p&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Lorsqu&amp;rsquo;on élabore ou étudie un algorithme, il est donc nécessaire de&#xA;vérifier :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recherche d&#39;un élément dans un tableau : algorithmes itératifs et récursifs</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-3-recursivite-recherches/</link>
      <pubDate>Wed, 09 Sep 2020 21:33:15 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-3-recursivite-recherches/</guid>
      <description>&lt;h2 id=&#34;recherche-dun-élément-dans-un-tableau&#34;&gt;Recherche d&amp;rsquo;un élément dans un tableau&lt;/h2&gt;&#xA;&lt;p&gt;La recherche d&amp;rsquo;éléments dans un tableau a déjà été évoquée en classe de première. Les deux algorithmes mis en œuvre à cette occasion, la &lt;strong&gt;recherche linéaire&lt;/strong&gt; et la &lt;strong&gt;recherche dichotomique&lt;/strong&gt;, utilisaient des boucles.&lt;br&gt;&#xA;L&amp;rsquo;objectif de cette séance est de rapidement revoir ces algorithmes et de mettre en œuvres des algorithmes récursifs de même complexité. Quatre algorithmes de recherche vont donc être implémentés :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche linéaire itérative&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche linéaire récursive&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche dichotomique itérative&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche dichotomique récursive&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;travail-à-faire&#34;&gt;Travail à faire&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Implémenter en Python les cinq algorithmes suivants et répondre aux questions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;note warning&#34;&gt;&#xA;  Penser à donner la &lt;strong&gt;spécification&lt;/strong&gt; de chacune des fonctions et écrire une &lt;strong&gt;série des tests&lt;/strong&gt; pour chacune d&amp;rsquo;elles.&#xA;&lt;/div&gt;&#xA;&lt;!--&#xA;- Un corrigé se trouve à cette adresse&amp;nbsp;: &#xA;&lt;a class=&#34;remote&#34; href=&#34;#ZgotmplZ&#34; target=&#34;_blank&#34;&gt;&amp;lt;https://repl.it/join/azqimfmv-dlatreyte&amp;gt;&lt;/a&gt;&#xA;&#xA;&gt;&#xA;--&gt;&#xA;&lt;h2 id=&#34;recherche-séquentielle-ou-linéaire&#34;&gt;Recherche séquentielle (ou linéaire)&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  La &lt;strong&gt;recherche séquentielle (ou linéaire)&lt;/strong&gt;  consiste à&#xA;&lt;em&gt;comparer la valeur recherchée à toutes les valeurs présentes dans le tableau&lt;/em&gt;.&#xA;&lt;/div&gt;&#xA;&lt;h3 id=&#34;recherche-séquentielle-itérative&#34;&gt;Recherche séquentielle itérative&lt;/h3&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;h4 id=&#34;algorithme-1&#34;&gt;Algorithme 1&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;Fonction :&lt;/strong&gt; recherche(tab, valeur)&lt;br&gt;&#xA;&lt;strong&gt;Action :&lt;/strong&gt; recherche la valeur « valeur » dans le tableau « tab »&lt;br&gt;&#xA;&lt;strong&gt;Début&lt;/strong&gt;&lt;br&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;i ⟵ 0  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;i_val ⟵ -1  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;nb ⟵ Longueur(tab)  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;&lt;strong&gt;TantQue&lt;/strong&gt; i &amp;lt; nb &lt;em&gt;Faire&lt;/em&gt;    &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 4em&#34;&gt;&lt;strong&gt;Si&lt;/strong&gt; tab[i] = valeur &lt;strong&gt;Alors&lt;/strong&gt;  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 6em&#34;&gt;i_val ⟵ i  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 4em&#34;&gt;&lt;strong&gt;FinSi&lt;/strong&gt;  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 4em&#34;&gt;i ⟵ i + 1  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;&lt;strong&gt;FinTantQue&lt;/strong&gt;  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;&lt;strong&gt;Renvoyer&lt;/strong&gt; i_val  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;strong&gt;Fin&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
