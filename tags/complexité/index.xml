<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Complexité on Accueil</title>
    <link>https://dlatreyte.github.io/tags/complexit%C3%A9/</link>
    <description>Recent content in Complexité on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Fri, 24 Nov 2023 12:59:57 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/tags/complexit%C3%A9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tri par insertion</title>
      <link>https://dlatreyte.github.io/terminales-nsi/tris/2-tri-par-insertion/</link>
      <pubDate>Fri, 24 Nov 2023 12:59:57 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/tris/2-tri-par-insertion/</guid>
      <description>Tri du joueur de cartes Le tri par insertion est un tri « naturel » souvent qualifié de « tri du joueur de carte ».&#xA;Comment un joueur de carte trie-t-il ses cartes ?&#xA;Au début, la main gauche du joueur est vide et ses cartes sont posées sur la table. Le joueur prend alors sur la table les cartes, une par une avec sa main droite, pour les placer dans sa main gauche.</description>
    </item>
    <item>
      <title>Tri par sélection</title>
      <link>https://dlatreyte.github.io/terminales-nsi/tris/1-tri-par-selection/</link>
      <pubDate>Fri, 24 Nov 2023 12:59:47 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/tris/1-tri-par-selection/</guid>
      <description>La recherche d&amp;rsquo;un élément dans un tableau est beaucoup plus efficace si ce tableau est ordonné. À vrai dire, ce n&amp;rsquo;est pas en cours d&amp;rsquo;informatique que vous avez découvert ceci : dans toutes les bibliothèques les livres sont classés de façon à rendre leur recherche plus rapide !&#xA;Le tri des tableaux/listes permet de trouver rapidement les objets recherchés et facilite la recherche des valeurs extrêmes. La question que se propose d&amp;rsquo;aborder ce document est donc : « comment classer les éléments d&amp;rsquo;un tableau selon une relation d&amp;rsquo;ordre donnée ?</description>
    </item>
    <item>
      <title>Les Files</title>
      <link>https://dlatreyte.github.io/terminales-nsi/piles-files/2-files/</link>
      <pubDate>Sat, 31 Oct 2020 22:50:06 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/piles-files/2-files/</guid>
      <description>Rappel : Type de Données Abstrait (TDA) Une structure de données ou type de données abstrait est un moyen d&amp;rsquo;organiser et de manipuler les données en mémoire. Un TDA est donc définit par :&#xA;Son nom ; Sa spécification, c&amp;rsquo;est à dire la liste des manipulations/opérations que l&amp;rsquo;on peut ou pas effectuer. La spécification indique généralement la complexité de chacune des opérations prévues par le TDA. Un type de données abstrait ne dépend pas de la manière dont la structure de données est implémentée dans le langage de programmation utilisé.</description>
    </item>
    <item>
      <title>Les Piles</title>
      <link>https://dlatreyte.github.io/terminales-nsi/piles-files/1-piles/</link>
      <pubDate>Tue, 27 Oct 2020 03:40:03 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/piles-files/1-piles/</guid>
      <description>Rappel : Type de Données Abstrait (TDA) Une structure de données ou type de données abstrait est un moyen d&amp;rsquo;organiser et de manipuler les données en mémoire. Un TDA est donc définit par :&#xA;Son nom ; Sa spécification, c&amp;rsquo;est à dire la liste des manipulations/opérations que l&amp;rsquo;on peut ou pas effectuer. La spécification indique généralement la complexité de chacune des opérations prévues par le TDA. Un type de données abstrait ne dépend pas de la manière dont la structure de données est implémentée dans le langage de programmation utilisé.</description>
    </item>
    <item>
      <title>Listes Chaînées, présentation</title>
      <link>https://dlatreyte.github.io/terminales-nsi/listes-chainees/1-listes-chainees/</link>
      <pubDate>Wed, 14 Oct 2020 18:01:18 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/listes-chainees/1-listes-chainees/</guid>
      <description>Tableaux Un tableau est une structure de données dans laquelle les éléments, tous de même type, occupent des positions contiguës en mémoire. Le nombre d&amp;rsquo;éléments qu&amp;rsquo;un tableau peut contenir est déterminé à la création d&amp;rsquo;un tableau. Type Python Type Opération Exemple Complexité N&amp;rsquo;existe pas Tableau Accès à un élément tab[i] $O(1)$ Modification d&amp;rsquo;un élément tab[i] = x $O(1)$ Effacement d&amp;rsquo;un élément retire(tab, i) $O(n)$ Insertion d&amp;rsquo;un élément insere(tab, x, i) $O(n)$ Recherche d&amp;rsquo;un élément est_dans(tab, x) $O(n)$ La structure de données appelée « liste » dans le langage Python est implémentée à l&amp;rsquo;aide de tableaux dynamiques.</description>
    </item>
    <item>
      <title>Structures de données fournies avec le langage Python</title>
      <link>https://dlatreyte.github.io/terminales-nsi/types-abstraits/1-structures-integrees/</link>
      <pubDate>Tue, 13 Oct 2020 05:25:49 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/types-abstraits/1-structures-integrees/</guid>
      <description>Python possède dans la bibliothèque standard un grand nombre de structures de données, programmées de manière efficace.&#xA;Rappels : modules, fonctions Pour chaque module, on distingue :&#xA;sa réalisation (ou implémentation) : c&amp;rsquo;est le code lui-même.&#xA;son interface (API) : c&amp;rsquo;est l&amp;rsquo;énumération des fonctions définies dans le module qui sont utilisées depuis d&amp;rsquo;autres modules/programmes, les clients.&#xA;L&amp;rsquo;interface doit présenter une documentation dans laquelle tout ce que doit savoir le client doit être indiqué.</description>
    </item>
    <item>
      <title>Rappels d&#39;algorithmique</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-4-rappels-algorithmique/</link>
      <pubDate>Sat, 12 Sep 2020 17:46:07 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-4-rappels-algorithmique/</guid>
      <description>Algorithmique Un algorithme est une suite finie et non ambiguë d&amp;rsquo;opérations ou d&amp;rsquo;instructions à réaliser afin de résoudre un problème. En informatique, pour qu&amp;rsquo;un algorithme puisse être implémenté, il est nécessaire de s&amp;rsquo;assurer que la « suite finie et non ambiguë d&amp;rsquo;opérations ou d&amp;rsquo;instructions à réaliser » s&amp;rsquo;effectue en une durée finie .&#xA;Lorsqu&amp;rsquo;on élabore ou étudie un algorithme, il est donc nécessaire de vérifier :&#xA;Sa finitude : Il doit se terminer en un temps fini.</description>
    </item>
    <item>
      <title>Recherche d&#39;un élément dans un tableau : algorithmes itératifs et récursifs</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-3-recursivite-recherches/</link>
      <pubDate>Wed, 09 Sep 2020 21:33:15 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-3-recursivite-recherches/</guid>
      <description>Recherche d&amp;rsquo;un élément dans un tableau La recherche d&amp;rsquo;éléments dans un tableau a déjà été évoquée en classe de première. Les deux algorithmes mis en œuvre à cette occasion, la recherche linéaire et la recherche dichotomique, utilisaient des boucles.&#xA;L&amp;rsquo;objectif de cette séance est de rapidement revoir ces algorithmes et de mettre en œuvres des algorithmes récursifs de même complexité. Quatre algorithmes de recherche vont donc être implémentés :&#xA;La recherche linéaire itérative ; La recherche linéaire récursive ; La recherche dichotomique itérative ; La recherche dichotomique récursive.</description>
    </item>
  </channel>
</rss>
