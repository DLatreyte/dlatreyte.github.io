<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tableau Dynamique on Accueil</title>
    <link>https://dlatreyte.github.io/tags/tableau-dynamique/</link>
    <description>Recent content in Tableau Dynamique on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sat, 31 Oct 2020 22:50:06 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/tags/tableau-dynamique/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Les Files</title>
      <link>https://dlatreyte.github.io/terminales-nsi/piles-files/2-files/</link>
      <pubDate>Sat, 31 Oct 2020 22:50:06 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/piles-files/2-files/</guid>
      <description>&lt;h2 id=&#34;rappel--type-de-données-abstrait-tda&#34;&gt;Rappel : Type de Données Abstrait (TDA)&lt;/h2&gt;&#xA;&lt;p&gt;Une structure de données ou type de données abstrait est un &lt;em&gt;moyen d&amp;rsquo;organiser et de manipuler les données en mémoire&lt;/em&gt;. Un TDA est donc définit par :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Son nom ;&lt;/li&gt;&#xA;&lt;li&gt;Sa spécification, c&amp;rsquo;est à dire la liste des manipulations/opérations que l&amp;rsquo;on peut ou pas effectuer.&#xA;La spécification indique généralement la complexité de chacune des opérations prévues par le TDA.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;note warning&#34;&gt;&#xA;  Un type de données abstrait &lt;strong&gt;ne dépend pas&lt;/strong&gt; de la manière dont la structure de données est implémentée dans le langage de programmation utilisé.&lt;br&gt;&#xA;Un TDA peut être implémenté de plusieurs façons différentes.&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;quest-ce-quune-file-&#34;&gt;Qu&amp;rsquo;est-ce qu&amp;rsquo;une file ?&lt;/h2&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;p&gt;Une &lt;strong&gt;file&lt;/strong&gt; est une structure de données abstraite dans laquelle &lt;em&gt;les données sont organisées comme le seraient des personnes dans une &lt;strong&gt;file d&amp;rsquo;attente&lt;/strong&gt; (au guichet de la poste par exemple) :&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Listes Chaînées, présentation</title>
      <link>https://dlatreyte.github.io/terminales-nsi/listes-chainees/1-listes-chainees/</link>
      <pubDate>Wed, 14 Oct 2020 18:01:18 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/listes-chainees/1-listes-chainees/</guid>
      <description>&lt;h2 id=&#34;tableaux&#34;&gt;Tableaux&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;ul&gt;&#xA;&lt;li&gt;Un &lt;strong&gt;tableau&lt;/strong&gt; est une &lt;em&gt;structure de données&lt;/em&gt; dans laquelle &lt;em&gt;les éléments, tous de même type, occupent des positions contiguës en mémoire&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Le nombre d&amp;rsquo;éléments qu&amp;rsquo;un tableau peut contenir est déterminé à la création d&amp;rsquo;un tableau.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Type Python&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Type&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Opération&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Exemple&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Complexité&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;N&amp;rsquo;existe pas&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Tableau&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Accès à un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;tab[i]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(1)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Modification d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;tab[i] = x&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(1)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Effacement d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;retire(tab, i)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Insertion d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;insere(tab, x, i)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Recherche d&amp;rsquo;un élément&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;est_dans(tab, x)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$O(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;ul&gt;&#xA;&lt;li&gt;La structure de données appelée « liste » dans le langage Python est implémentée à l&amp;rsquo;aide de &lt;strong&gt;tableaux dynamiques&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;Remarque :&lt;/strong&gt; Dans la suite de ce document, on va considérer que la liste Python &lt;code&gt;tab&lt;/code&gt;, créé par l&amp;rsquo;instruction &lt;code&gt;tab = [i for i in range(20)]&lt;/code&gt; est de longueur fixe. &lt;em&gt;Elle se comporte alors comme un tableau.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structures de données fournies avec le langage Python</title>
      <link>https://dlatreyte.github.io/terminales-nsi/types-abstraits/1-structures-integrees/</link>
      <pubDate>Tue, 13 Oct 2020 05:25:49 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/types-abstraits/1-structures-integrees/</guid>
      <description>&lt;p&gt;Python possède dans la bibliothèque standard un grand nombre de structures de données, programmées de manière efficace.&lt;/p&gt;&#xA;&lt;h2 id=&#34;rappels--modules-fonctions&#34;&gt;Rappels : modules, fonctions&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Pour chaque &lt;strong&gt;module&lt;/strong&gt;, on distingue :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;sa réalisation&lt;/strong&gt; (ou &lt;strong&gt;implémentation&lt;/strong&gt;) : c&amp;rsquo;est le code lui-même.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;son interface (API)&lt;/strong&gt; : c&amp;rsquo;est l&amp;rsquo;énumération des fonctions définies dans le module qui sont utilisées depuis d&amp;rsquo;autres modules/programmes, les &lt;strong&gt;clients&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;L&amp;rsquo;interface doit présenter une &lt;strong&gt;documentation&lt;/strong&gt; dans laquelle  &lt;strong&gt;tout ce que doit savoir le client doit être indiqué&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
