<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tableau dynamique on Accueil</title>
    <link>https://dlatreyte.github.io/tags/tableau-dynamique/</link>
    <description>Recent content in Tableau dynamique on Accueil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Sat, 31 Oct 2020 22:50:06 +0400</lastBuildDate><atom:link href="https://dlatreyte.github.io/tags/tableau-dynamique/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Les Files</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-8/2-files/</link>
      <pubDate>Sat, 31 Oct 2020 22:50:06 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-8/2-files/</guid>
      <description>Rappel : Type de Données Abstrait (TDA) Une structure de données ou type de données abstrait est un moyen d&amp;rsquo;organiser et de manipuler les données en mémoire. Un TDA est donc définit par :
Son nom ; Sa spécification, c&amp;rsquo;est à dire la liste des manipulations/opérations que l&amp;rsquo;on peut ou pas effectuer. La spécification indique généralement la complexité de chacune des opérations prévues par le TDA. Un type de données abstrait ne dépend pas de la manière dont la structure de données est implémentée dans le langage de programmation utilisé.</description>
    </item>
    
    <item>
      <title>Listes Chaînées</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-7/1-listes-chainees/</link>
      <pubDate>Wed, 14 Oct 2020 18:01:18 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-7/1-listes-chainees/</guid>
      <description>Tableaux Un tableau est une structure de données dans laquelle les éléments, de même type, occupent des positions contiguës en mémoire. Le nombre d&amp;rsquo;éléments qu&amp;rsquo;un tableau peut contenir est déterminé à la création d&amp;rsquo;un tableau. Type Python Type abstrait Opération Exemple Complexité N&amp;rsquo;existe pas Tableau Accès à un élément tab[i] $O(1)$ Modification d&amp;rsquo;un élément tab[i] = x $O(1)$ Effacement d&amp;rsquo;un élément retire(tab, i) $O(n)$ Insertion d&amp;rsquo;un élément insere(tab, x, i) $O(n)$ Recherche d&amp;rsquo;un élément est_dans(tab, x) $O(n)$ La structure de données appelée « liste » dans le langage Python est en fait un tableau dynamique.</description>
    </item>
    
    <item>
      <title>Structures de données fournies avec le langage Python</title>
      <link>https://dlatreyte.github.io/terminales-nsi/chap-6/1-structures-integrees/</link>
      <pubDate>Tue, 13 Oct 2020 05:25:49 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/chap-6/1-structures-integrees/</guid>
      <description>Python possède dans la bibliothèque standard un grand nombre de structures de données, programmées de manière efficace.
Rappels : modules, fonctions Pour chaque module, on distingue :
sa réalisation (ou implémentation) : c&amp;rsquo;est le code lui-même.
son interface (API) : c&amp;rsquo;est l&amp;rsquo;énumération des fonctions définies dans le module qui sont utilisées depuis d&amp;rsquo;autres modules/programmes, les clients.
L&amp;rsquo;interface doit présenter une documentation dans laquelle tout ce que doit savoir le client doit être indiqué.</description>
    </item>
    
  </channel>
</rss>
