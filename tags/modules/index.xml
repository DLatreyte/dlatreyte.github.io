<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modules on Accueil</title>
    <link>https://dlatreyte.github.io/tags/modules/</link>
    <description>Recent content in Modules on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Tue, 22 Sep 2020 05:15:58 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/tags/modules/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fourniture et utilisation d&#39;une API</title>
      <link>https://dlatreyte.github.io/terminales-nsi/modularite/4-api/</link>
      <pubDate>Tue, 22 Sep 2020 05:15:58 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/modularite/4-api/</guid>
      <description>&lt;h2 id=&#34;api&#34;&gt;API&lt;/h2&gt;&#xA;&lt;p&gt;Une API (en anglais « Application programming interface ») est une interface de programmation d&amp;rsquo;application. Elle est destinée à être utilisée par des programmes. Le principe de ce type d&amp;rsquo;interface est le même que celui des UI (« User Interface ») ou des GUI (« Graphical User Interface ») destinées elles à un utilisateur humain.&lt;/p&gt;&#xA;&lt;p&gt;Composée de &lt;em&gt;constantes&lt;/em&gt;, de &lt;em&gt;fonctions&lt;/em&gt;, de &lt;em&gt;classes&lt;/em&gt;, elle sert de &lt;em&gt;lien entre un programme et les programmes qui vont l&amp;rsquo;utiliser&lt;/em&gt;. Elle peut être proposée par un service web avec une documentation décrivant l&amp;rsquo;utilisation qui permettra la communication et l&amp;rsquo;échange des données. Il existe, par exemple, plusieurs API de géolocalisation qui peuvent être intégrées à des programmes. Une API est très souvent proposée par une bibliothèque logicielle composée de fonctions destinées à être utilisées dans divers programmes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exercices</title>
      <link>https://dlatreyte.github.io/terminales-nsi/modularite/3-exercices/</link>
      <pubDate>Sun, 20 Sep 2020 05:12:32 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/modularite/3-exercices/</guid>
      <description>&lt;h2 id=&#34;enquêter-sur-une-erreur-dans-un-calcul-de-pi&#34;&gt;Enquêter sur une erreur dans un calcul de $\pi$&lt;/h2&gt;&#xA;&lt;p&gt;La somme des inverses des carrés des nombres entiers converge vers $\dfrac{\pi^2}{6}$.&lt;/p&gt;&#xA;&lt;p&gt;$$\sum_{k=1}^{\infty} \dfrac{1}{k^2} = \dfrac{\pi^2}{6}$$&lt;/p&gt;&#xA;&lt;p&gt;On utilise cette formule pour trouver une approximation de $\pi$.&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py3&#34; data-lang=&#34;py3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;terme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;approxpi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# utilise les termes jusqu’à 1/n**2 inclus&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;terme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modules et exceptions</title>
      <link>https://dlatreyte.github.io/terminales-nsi/modularite/1-modules/</link>
      <pubDate>Tue, 15 Sep 2020 05:06:32 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/modularite/1-modules/</guid>
      <description>&lt;p&gt;Ce chapitre se concentre sur les modules de Python et sur les modalités&#xA;d&amp;rsquo;importation des données des modules dans l&amp;rsquo;environnement de travail.&lt;/p&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;L&amp;rsquo;objectif de ce document est de souligner l&amp;rsquo;importance d&amp;rsquo;un &lt;strong&gt;code modulaire&lt;/strong&gt;,&#xA;c&amp;rsquo;est à dire d&amp;rsquo;un code qui :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;puisse être &lt;em&gt;utilisé dans plusieurs programmes&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;puisse être &lt;em&gt;documenté&lt;/em&gt; précisément ;&lt;/li&gt;&#xA;&lt;li&gt;soit suffisamment compact pour &lt;em&gt;être étudié avec soin&lt;/em&gt; et en particulier &lt;em&gt;testé&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;quest-ce-quun-modulenbsp&#34;&gt;Qu&amp;rsquo;est-ce qu&amp;rsquo;un module ?&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;em&gt;Un module permet d&amp;rsquo;organiser logiquement le code Python&lt;/em&gt;.&#xA;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Quand la taille du code augmente, il peut être pratique de le diviser en entités organisées qui&#xA;peuvent continuer à interagir.&lt;/li&gt;&#xA;&lt;li&gt;Un module permet aussi de se créer une «  boite à outils » contenant des fonctions appelées depuis&#xA;plusieurs programmes.&lt;/li&gt;&#xA;&lt;li&gt;Finalement, &lt;em&gt;un module permet de bénéficier du travail déjà effectué, maximisant ainsi la réutilisabilité du code&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;modules-et-fichiers&#34;&gt;Modules et fichiers&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  Si les modules représentent un moyen d&amp;rsquo;organiser &lt;strong&gt;logiquement&lt;/strong&gt; le code&#xA;Python, les fichiers permettent quant à eux d&amp;rsquo;organiser &lt;strong&gt;physiquement&lt;/strong&gt; le&#xA;code.&#xA;&lt;/div&gt;&#xA;&lt;p&gt;À cette fin, &lt;em&gt;chaque fichier est considéré comme un module individuel,&#xA;et réciproquement&lt;/em&gt;. &lt;em&gt;Le nom de fichier d&amp;rsquo;un module est le nom du module&#xA;auquel on ajoute l&amp;rsquo;extension&lt;/em&gt; &lt;code&gt;.py&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Capitalisation d&#39;une valeur</title>
      <link>https://dlatreyte.github.io/terminales-nsi/modularite/2-capitalisation/</link>
      <pubDate>Tue, 15 Sep 2020 05:05:07 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/modularite/2-capitalisation/</guid>
      <description>&lt;p&gt;Cette séance a pour objectif de vous familiariser avec la &lt;em&gt;création et la&#xA;manipulation de modules&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;p&gt;Comme il est maintenant de tradition vous diviserez le code de votre programme&#xA;principal en trois parties:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;em&gt;Importation des modules&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Définitions des fonctions&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Partie principale&lt;/em&gt;  (lieu d&amp;rsquo;appel des fonctions).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;Vous documenterez aussi &lt;strong&gt;systématiquement&lt;/strong&gt;  vos fonctions&lt;/em&gt;  (une aide sera&#xA;fournie dans les questions relatives à la définition de chacune de ces&#xA;fonctions).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
