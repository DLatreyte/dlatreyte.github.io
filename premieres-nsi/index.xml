<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1ère Spécialité NSI on Accueil</title>
    <link>https://dlatreyte.github.io/premieres-nsi/</link>
    <description>Recent content in 1ère Spécialité NSI on Accueil</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Sat, 14 Sep 2019 16:47:06 +0400</lastBuildDate><atom:link href="https://dlatreyte.github.io/premieres-nsi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problème du sac à dos</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-02/</link>
      <pubDate>Sun, 23 Aug 2020 23:27:12 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-02/</guid>
      <description>Au programme Algorithmique Contenus Capacités attendues Commentaires Algorithmes gloutons Résoudre un problème grâce à un algorithme glouton. Exemples : problèmes du sac à dos ou du rendu de monnaie. Les algorithmes gloutons constituent une méthode algorithmique parmi d’autres qui seront vues en terminale. </description>
    </item>
    
    <item>
      <title>Algorithmes gloutons, problème du rendu de monnaie</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-01/</link>
      <pubDate>Sun, 23 Aug 2020 23:00:09 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-01/</guid>
      <description>Au programme Algorithmique Contenus Capacités attendues Commentaires Algorithmes gloutons Résoudre un problème grâce à un algorithme glouton. Exemples : problèmes du sac à dos ou du rendu de monnaie. Les algorithmes gloutons constituent une méthode algorithmique parmi d’autres qui seront vues en terminale. Introduction Les algorithmes gloutons forment une catégorie d&amp;rsquo;algorithmes permettant de parvenir à une solution pour un problème d&amp;rsquo;optimisation qui vise à maximiser/minimiser une quantité (plus court chemin (GPS), plus petite durée d&amp;rsquo;exécution, meilleure organisation d&amp;rsquo;un emploi du temps, etc.</description>
    </item>
    
    <item>
      <title>Chap Huit</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-huit/chap-huit/</link>
      <pubDate>Fri, 25 Oct 2019 10:54:09 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-huit/chap-huit/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quelques dessins simples avec une tortue</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-sept/chap-7/</link>
      <pubDate>Sat, 12 Oct 2019 18:10:22 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-sept/chap-7/</guid>
      <description>1. Présentation de la « tortue graphique » La « tortue graphique » a été inventée à la fin des années 60 par Seymour Papert et ses collègues du MIT (célèbre université américaine) pour permettre de rendre l&amp;rsquo;apprentissage de la programmation plus ludique. Elle faisait alors partie du langage Logo, spécifiquement développé pour être utilisé par de jeunes enfants.
Le nom « tortue graphique » suggère la façon dont les figures géométriques vont être dessinées à l&amp;rsquo;écran.</description>
    </item>
    
    <item>
      <title>Contrôle du flot d’exécution d’un programme, les structures itératives</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-six/chap-06/</link>
      <pubDate>Sat, 28 Sep 2019 17:41:06 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-six/chap-06/</guid>
      <description>Ce chapitre reprend l&amp;rsquo;étude de structures de contrôles, c&amp;rsquo;est à dire d&amp;rsquo;instructions qui permettent de modifier le « flot d&amp;rsquo;exécution implicite » d&amp;rsquo;un programme.
Après les structures conditionnelles (ou alternatives), les structures itératives (ou boucles) sont introduites.
Structures itératives Les boucles sont des instructions répétitives. Comme les tests conditionnels, elles nécessitent la définition de blocs d’instructions. Les instructions de ces blocs sont répétées tant qu&amp;rsquo;une condition d’arrêt n&amp;rsquo;est pas vérifiée. Chaque passage dans la boucle s&amp;rsquo;appelle une itération.</description>
    </item>
    
    <item>
      <title>Contrôle du flot d’exécution d’un programme, les structures conditionnelles</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-quatre/chap-04/</link>
      <pubDate>Sat, 28 Sep 2019 17:40:46 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-quatre/chap-04/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
