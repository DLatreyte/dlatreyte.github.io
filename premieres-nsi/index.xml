<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1ère Spécialité NSI on Accueil</title>
    <link>https://dlatreyte.github.io/premieres-nsi/</link>
    <description>Recent content in 1ère Spécialité NSI on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Sun, 23 Aug 2020 23:27:12 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/premieres-nsi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problème du sac à dos</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-02/</link>
      <pubDate>Sun, 23 Aug 2020 23:27:12 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-02/</guid>
      <description>&lt;h2 id=&#34;au-programme&#34;&gt;Au programme&lt;/h2&gt;&#xA;&lt;h4 id=&#34;algorithmique&#34;&gt;Algorithmique&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Contenus&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Capacités attendues&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Commentaires&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Algorithmes gloutons&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Résoudre un problème grâce à un algorithme glouton.&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Exemples : problèmes du sac à dos ou du rendu de monnaie. Les algorithmes gloutons constituent une méthode algorithmique parmi d’autres qui seront vues en terminale.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Algorithmes gloutons, problème du rendu de monnaie</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-01/</link>
      <pubDate>Sun, 23 Aug 2020 23:00:09 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-23/chap-23-01/</guid>
      <description>&lt;h2 id=&#34;au-programme&#34;&gt;Au programme&lt;/h2&gt;&#xA;&lt;h4 id=&#34;algorithmique&#34;&gt;Algorithmique&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Contenus&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Capacités attendues&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Commentaires&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Algorithmes gloutons&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Résoudre un problème grâce à un algorithme glouton.&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Exemples : problèmes du sac à dos ou du rendu de monnaie. Les algorithmes gloutons constituent une méthode algorithmique parmi d’autres qui seront vues en terminale.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Les algorithmes gloutons forment une catégorie d&amp;rsquo;algorithmes permettant de&#xA;parvenir à une solution pour un &lt;strong&gt;problème d&amp;rsquo;optimisation&lt;/strong&gt;  qui vise à&#xA;&lt;em&gt;maximiser/minimiser une quantité&lt;/em&gt;  (plus court chemin (GPS), plus petite&#xA;durée d&amp;rsquo;exécution, meilleure organisation d&amp;rsquo;un emploi du temps, etc.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chap Huit</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-huit/chap-huit/</link>
      <pubDate>Fri, 25 Oct 2019 10:54:09 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-huit/chap-huit/</guid>
      <description></description>
    </item>
    <item>
      <title>Quelques dessins simples avec une tortue</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-sept/chap-7/</link>
      <pubDate>Sat, 12 Oct 2019 18:10:22 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-sept/chap-7/</guid>
      <description>&lt;h2 id=&#34;1-présentation-de-la--tortue-graphique-&#34;&gt;1. Présentation de la « tortue graphique »&lt;/h2&gt;&#xA;&lt;p&gt;La « tortue graphique » a été inventée à la fin des années 60 par Seymour Papert et ses collègues du MIT (célèbre université américaine) pour permettre de rendre l&amp;rsquo;apprentissage de la programmation plus ludique. Elle faisait alors partie du langage Logo, spécifiquement développé pour être utilisé par de jeunes enfants.&lt;/p&gt;&#xA;&lt;p&gt;Le nom « tortue graphique » suggère la façon dont les figures géométriques vont être dessinées à l&amp;rsquo;écran.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contrôle du flot d’exécution d’un programme, les structures itératives</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-six/chap-06/</link>
      <pubDate>Sat, 28 Sep 2019 17:41:06 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-six/chap-06/</guid>
      <description>&lt;p&gt;Ce chapitre reprend l&amp;rsquo;étude de structures de contrôles, c&amp;rsquo;est à dire d&amp;rsquo;instructions qui permettent de modifier le « flot d&amp;rsquo;exécution implicite » d&amp;rsquo;un programme.&lt;/p&gt;&#xA;&lt;p&gt;Après les &lt;strong&gt;structures conditionnelles&lt;/strong&gt; (ou &lt;strong&gt;alternatives&lt;/strong&gt;), les &lt;strong&gt;structures itératives&lt;/strong&gt; (ou &lt;strong&gt;boucles&lt;/strong&gt;) sont introduites.&lt;/p&gt;&#xA;&lt;h2 id=&#34;structures-itératives&#34;&gt;Structures itératives&lt;/h2&gt;&#xA;&lt;p&gt;Les boucles sont des &lt;em&gt;instructions répétitives&lt;/em&gt;. Comme les tests conditionnels, elles nécessitent la définition de &lt;strong&gt;blocs d’instructions&lt;/strong&gt;.&#xA;Les instructions de ces blocs sont répétées tant qu&amp;rsquo;une &lt;strong&gt;condition d’arrêt&lt;/strong&gt; n&amp;rsquo;est pas vérifiée.&#xA;Chaque passage dans la boucle s&amp;rsquo;appelle une &lt;strong&gt;itération&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contrôle du flot d’exécution d’un programme, les structures conditionnelles</title>
      <link>https://dlatreyte.github.io/premieres-nsi/chap-quatre/chap-04/</link>
      <pubDate>Sat, 28 Sep 2019 17:40:46 +0400</pubDate>
      <guid>https://dlatreyte.github.io/premieres-nsi/chap-quatre/chap-04/</guid>
      <description></description>
    </item>
  </channel>
</rss>
