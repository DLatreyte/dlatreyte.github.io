<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Les graphes on Accueil</title>
    <link>https://dlatreyte.github.io/terminales-nsi/graphes/</link>
    <description>Recent content in Les graphes on Accueil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Tue, 20 Apr 2021 04:18:36 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/terminales-nsi/graphes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parcours en profondeur : écriture du code en Python</title>
      <link>https://dlatreyte.github.io/terminales-nsi/graphes/4-parcours-profondeur-python/</link>
      <pubDate>Thu, 06 May 2021 06:46:05 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/graphes/4-parcours-profondeur-python/</guid>
      <description>Écriture d&amp;rsquo;une classe Graphe L&amp;rsquo;objectif de cette partie est l&amp;rsquo;écriture du code modélisant un graphe orienté. La représentation choisie est celle d&amp;rsquo;un dictionnaire de successeurs (en cours et dans le document 15,2 on a étudié les représentations par des matrice et liste de successeurs).
La représentation par un dictionnaire de successeurs présente de nombreux avantages. Par exemple,
les sommets peuvent être des entiers ou des chaînes de caractères quelconques ; La complexité de la liste des successeurs est directement proportionnelle au nombre de successeurs pour un sommet donné.</description>
    </item>
    <item>
      <title>Parcours de graphes</title>
      <link>https://dlatreyte.github.io/terminales-nsi/graphes/3-parcours-graphes/</link>
      <pubDate>Thu, 29 Apr 2021 09:18:21 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/graphes/3-parcours-graphes/</guid>
      <description>Cours et exercices non corrigés Solutions Cours et exercices corrigés</description>
    </item>
    <item>
      <title>Représentation d&#39;un graphe en informatique</title>
      <link>https://dlatreyte.github.io/terminales-nsi/graphes/2-representation-graphe/</link>
      <pubDate>Thu, 22 Apr 2021 04:48:57 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/graphes/2-representation-graphe/</guid>
      <description>Plusieurs modes de représentation peuvent être implémentés pour stocker des graphes : matrices d’adjacence (ou sommet-sommet), listes des voisins, des successeurs ou des prédécesseurs. Lors de cette séance nous allons écrire les classes réalisant ces implémentations.
Matrice sommet-sommet Écrire le code de la classe GrapheM qui implémente une matrice sommet-sommet.
La spécification du constructeur de la classe est : 1 2 3 4 def __init__(self: GrapheM, mat: List[List[int]]) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34; Constructeur de la classe.</description>
    </item>
    <item>
      <title>Les graphes : structure de données</title>
      <link>https://dlatreyte.github.io/terminales-nsi/graphes/1-graphes-structure-de-donnees/</link>
      <pubDate>Tue, 20 Apr 2021 07:56:25 +0400</pubDate><author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/graphes/1-graphes-structure-de-donnees/</guid>
      <description>Cours et exercices non corrigés Solutions Cours et exercices corrigés</description>
    </item>
  </channel>
</rss>
