<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Récursivité on Accueil</title>
    <link>https://dlatreyte.github.io/terminales-nsi/recursivite/</link>
    <description>Recent content in Récursivité on Accueil</description>
    <generator>Hugo</generator>
    <language>fr</language>
    <lastBuildDate>Tue, 26 Jan 2021 06:16:46 +0400</lastBuildDate>
    <atom:link href="https://dlatreyte.github.io/terminales-nsi/recursivite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dessin de figures fractales</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/5-fractales/</link>
      <pubDate>Tue, 26 Jan 2021 06:16:46 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/5-fractales/</guid>
      <description>&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Le mot fractale vient du latin fractus qui signifie brisé. En effet, une&#xA;figure fractale est un objet géométrique infiniment morcelé des détails&#xA;sont observables à une échelle arbitrairement choisie.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;En zoomant sur une partie de la figure, on peut retrouver toute la&#xA;figure&lt;/em&gt;, on dit qu&amp;rsquo;elle est &lt;strong&gt;auto similaire&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a class=&#34;remote&#34; href=&#34;&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maths-et-tiques.fr/index.php/detentes/les-fractales&#34;&gt;http://www.maths-et-tiques.fr/index.php/detentes/les-fractales&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a class=&#34;remote&#34; href=&#34;&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://fr.wikipedia.org/wiki/Fractalehttp://fr.wikipedia.org/wiki/Fractale&#34;&gt;http://fr.wikipedia.org/wiki/Fractalehttp://fr.wikipedia.org/wiki/Fractale&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Dans le code suivant (qu&amp;rsquo;il faudra étudier et exécuter) :&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Quel est le cas de base de l&amp;rsquo;algorithme récursif ?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rappels d&#39;algorithmique</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-4-rappels-algorithmique/</link>
      <pubDate>Sat, 12 Sep 2020 17:46:07 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-4-rappels-algorithmique/</guid>
      <description>&lt;h2 id=&#34;algorithmique&#34;&gt;Algorithmique&lt;/h2&gt;&#xA;&lt;!--&#xA;### Introduction&#xA;--&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  Un &lt;strong&gt;algorithme&lt;/strong&gt; est une &lt;em&gt;suite finie et non ambiguë&#xA;d&amp;rsquo;opérations ou d&amp;rsquo;instructions&lt;/em&gt; à réaliser afin de résoudre un problème.&#xA;&lt;/div&gt;&#xA;&lt;p&gt;En informatique, pour qu&amp;rsquo;un algorithme puisse être implémenté, il est&#xA;nécessaire de s&amp;rsquo;assurer que la « suite finie et non ambiguë d&amp;rsquo;opérations ou&#xA;d&amp;rsquo;instructions à réaliser » s&amp;rsquo;effectue en une &lt;strong&gt;durée finie&lt;/strong&gt; .&lt;/p&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;p&gt;Lorsqu&amp;rsquo;on élabore ou étudie un algorithme, il est donc nécessaire de&#xA;vérifier :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recherche d&#39;un élément dans un tableau : algorithmes itératifs et récursifs</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-3-recursivite-recherches/</link>
      <pubDate>Wed, 09 Sep 2020 21:33:15 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-3-recursivite-recherches/</guid>
      <description>&lt;h2 id=&#34;recherche-dun-élément-dans-un-tableau&#34;&gt;Recherche d&amp;rsquo;un élément dans un tableau&lt;/h2&gt;&#xA;&lt;p&gt;La recherche d&amp;rsquo;éléments dans un tableau a déjà été évoquée en classe de première. Les deux algorithmes mis en œuvre à cette occasion, la &lt;strong&gt;recherche linéaire&lt;/strong&gt; et la &lt;strong&gt;recherche dichotomique&lt;/strong&gt;, utilisaient des boucles.&lt;br&gt;&#xA;L&amp;rsquo;objectif de cette séance est de rapidement revoir ces algorithmes et de mettre en œuvres des algorithmes récursifs de même complexité. Quatre algorithmes de recherche vont donc être implémentés :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche linéaire itérative&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche linéaire récursive&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche dichotomique itérative&lt;/em&gt; ;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;La recherche dichotomique récursive&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;travail-à-faire&#34;&gt;Travail à faire&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Implémenter en Python les cinq algorithmes suivants et répondre aux questions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;note warning&#34;&gt;&#xA;  Penser à donner la &lt;strong&gt;spécification&lt;/strong&gt; de chacune des fonctions et écrire une &lt;strong&gt;série des tests&lt;/strong&gt; pour chacune d&amp;rsquo;elles.&#xA;&lt;/div&gt;&#xA;&lt;!--&#xA;- Un corrigé se trouve à cette adresse&amp;nbsp;: &#xA;&lt;a class=&#34;remote&#34; href=&#34;#ZgotmplZ&#34; target=&#34;_blank&#34;&gt;&amp;lt;https://repl.it/join/azqimfmv-dlatreyte&amp;gt;&lt;/a&gt;&#xA;&#xA;&gt;&#xA;--&gt;&#xA;&lt;h2 id=&#34;recherche-séquentielle-ou-linéaire&#34;&gt;Recherche séquentielle (ou linéaire)&lt;/h2&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  La &lt;strong&gt;recherche séquentielle (ou linéaire)&lt;/strong&gt;  consiste à&#xA;&lt;em&gt;comparer la valeur recherchée à toutes les valeurs présentes dans le tableau&lt;/em&gt;.&#xA;&lt;/div&gt;&#xA;&lt;h3 id=&#34;recherche-séquentielle-itérative&#34;&gt;Recherche séquentielle itérative&lt;/h3&gt;&#xA;&lt;div class=&#34;note normal&#34;&gt;&#xA;  &lt;h4 id=&#34;algorithme-1&#34;&gt;Algorithme 1&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;Fonction :&lt;/strong&gt; recherche(tab, valeur)&lt;br&gt;&#xA;&lt;strong&gt;Action :&lt;/strong&gt; recherche la valeur « valeur » dans le tableau « tab »&lt;br&gt;&#xA;&lt;strong&gt;Début&lt;/strong&gt;&lt;br&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;i ⟵ 0  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;i_val ⟵ -1  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;nb ⟵ Longueur(tab)  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;&lt;strong&gt;TantQue&lt;/strong&gt; i &amp;lt; nb &lt;em&gt;Faire&lt;/em&gt;    &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 4em&#34;&gt;&lt;strong&gt;Si&lt;/strong&gt; tab[i] = valeur &lt;strong&gt;Alors&lt;/strong&gt;  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 6em&#34;&gt;i_val ⟵ i  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 4em&#34;&gt;&lt;strong&gt;FinSi&lt;/strong&gt;  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 4em&#34;&gt;i ⟵ i + 1  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;&lt;strong&gt;FinTantQue&lt;/strong&gt;  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;span style=&#34;margin-left: 2em&#34;&gt;&lt;strong&gt;Renvoyer&lt;/strong&gt; i_val  &lt;/span&gt;&lt;br /&gt;&#xA;&lt;strong&gt;Fin&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>La récursivité appliquée aux chaînes de caractères et aux listes</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-2-recursivite-chaines-listes/</link>
      <pubDate>Tue, 08 Sep 2020 04:53:31 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-2-recursivite-chaines-listes/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Une chaîne de caractère est une &lt;strong&gt;structure de données&lt;/strong&gt; qui permet de rassembler en un &lt;em&gt;unique objet&lt;/em&gt; une &lt;strong&gt;succession ordonnée&lt;/strong&gt; de caractères. Ainsi, une &lt;em&gt;définition récursive d&amp;rsquo;une chaîne de caractères&lt;/em&gt; pourrait être :&lt;/p&gt;&#xA;&lt;div class=&#34;note tip&#34;&gt;&#xA;  &lt;h4 id=&#34;définition-récursive-dune-chaîne-de-caractères&#34;&gt;Définition récursive d&amp;rsquo;une chaîne de caractères&lt;/h4&gt;&#xA;&lt;p&gt;Une chaîne de caractères est :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;soit la chaîne de caractères vide ;&lt;/li&gt;&#xA;&lt;li&gt;soit constituée de son premier caractère et du reste des caractères qui forment aussi une chaîne de caractères (éventuellement vide).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Une liste est une &lt;strong&gt;structure de données&lt;/strong&gt; qui permet de rassembler en un &lt;em&gt;unique objet&lt;/em&gt; une &lt;strong&gt;succession ordonnée&lt;/strong&gt; d&amp;rsquo;objets (ou de valeurs). Ainsi, une &lt;em&gt;définition récursive d&amp;rsquo;une liste&lt;/em&gt; pourrait être :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Récursivité sur les entiers</title>
      <link>https://dlatreyte.github.io/terminales-nsi/recursivite/1-1-recursivite-sur-entiers/</link>
      <pubDate>Sat, 05 Sep 2020 18:34:00 +0400</pubDate>
      <guid>https://dlatreyte.github.io/terminales-nsi/recursivite/1-1-recursivite-sur-entiers/</guid>
      <description>&lt;center&gt;&#xA;&lt;h3&gt;To understand recursion, you must first understand recursion.&lt;/h3&gt;&#xA;&lt;/center&gt;&#xA;&lt;p&gt;La &lt;strong&gt;récurrence&lt;/strong&gt; est un &lt;em&gt;raisonnement mathématique&lt;/em&gt; courant et parmi les plus puissants pour démontrer des théorèmes ou construire des objets. Par exemple, on l&amp;rsquo;utilise dans un cours de mathématique de lycée pour montrer que :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pour tout entier $n \geqslant 0$, on a : $1 + 2 + 3 + \ldots + n = \dfrac{n(n+1)}{2}$ ;&lt;/li&gt;&#xA;&lt;li&gt;Un entier naturel n&amp;rsquo;est autre que 0 ou le successeur d&amp;rsquo;un entier naturel (0 est 0, 1 est le successeur de 0, 2 est le successeur de 1, &amp;hellip;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;En programmation, on peut raisonner de façon identique, nous allons &lt;strong&gt;construire des fonctions et des structures de données (listes chaînées, arbres, etc.) à l&amp;rsquo;aide d&amp;rsquo;une hypothèse de récurrence et d&amp;rsquo;un point de départ&lt;/strong&gt;. &lt;strong&gt;Le déroulement de la récurrence sera quant à lui pris en charge par la machine&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
