<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Épreuves pratiques on Accueil</title>
    <link>https://dlatreyte.github.io/terminales-nsi/ece/</link>
    <description>Recent content in Épreuves pratiques on Accueil</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Wed, 27 Oct 2021 17:49:14 +0400</lastBuildDate><atom:link href="https://dlatreyte.github.io/terminales-nsi/ece/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_17_18/</link>
      <pubDate>Sun, 10 Apr 2022 22:33:49 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_17_18/</guid>
      <description>Exercice 1 (1/3 des points) Écrire une fonction recherche qui prend en paramètres un tableau tab de nombres entiers triés par ordre croissant et un nombre entier n, et qui effectue une recherche dichotomique du nombre entier n dans le tableau non vide tab. Cette fonction doit renvoyer un indice correspondant au nombre cherché s’il est dans le tableau, -1 sinon.
Exercice 2 (1/3 des points) On considère la fonction separe ci-dessous qui prend en argument un tableau tab dont les éléments sont des 0 et des 1 et qui sépare les 0 des 1 en plaçant les 0 en début de tableau et les 1 à la suite.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_14_25/</link>
      <pubDate>Wed, 02 Mar 2022 05:32:46 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_14_25/</guid>
      <description>Exercice 1 (50% des points) Un professeur de NSI décide de gérer les résultats de sa classe sous la forme d’un dictionnaire :
les clefs sont les noms des élèves ; les valeurs sont des dictionnaires dont les clefs sont les types d’épreuves et les valeurs sont les notes obtenues associées à leurs coefficients. Avec : 1 2 3 4 5 6 7 8 9 10 11 12 resultats = {&amp;#39;Dupont&amp;#39;:{&amp;#39;DS1&amp;#39; : [15.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_23/</link>
      <pubDate>Mon, 24 Jan 2022 05:59:58 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_23/</guid>
      <description>Exercice 1 (50% des points) L’occurrence d’un caractère dans un phrase est le nombre de fois où ce caractère est présent.
Exemples : l’occurrence du caractère &amp;lsquo;o&amp;rsquo; dans &amp;lsquo;bonjour’ est 2 ; l’occurrence du caractère ‘b’ dans ‘Bébé’ est 1 ; l’occurrence du caractère ‘B’ dans ‘Bébé’ est 1 ; l’occurrence du caractère ‘ ‘ dans ‘Hello world !’ est 2. On cherche les occurrences des caractères dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caractères de la phrase et les valeurs l’occurrence de ces caractères.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_28/</link>
      <pubDate>Sun, 16 Jan 2022 23:13:15 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_28/</guid>
      <description>Exercice 1 (50% des points) Dans cet exercice, un arbre binaire de caractères est stocké sous la forme d’un dictionnaire où les clefs sont les caractères des nœuds de l’arbre et les valeurs, pour chaque clef, la liste des caractères des fils gauche et droit du nœud.
Par exemple, l’arbre
graph TD F((F)) --&gt; B((B)) F((F)) --&gt; G((G)) B((B)) --&gt; A((A)) B((B)) --&gt; D((D)) G((G)) --&gt; I((I)) D((D)) --&gt; C((C)) D((D)) --&gt; E((E)) I((I)) --&gt; H((H)) est stocké dans</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_24/</link>
      <pubDate>Tue, 07 Dec 2021 07:57:06 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_24/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction recherche qui prend en paramètres elt un nombre et tab un tableau de nombres, et qui renvoie l’indice de la dernière occurrence de elt dans tab si elt est dans tab et le -1 sinon.
Jeu de tests possible 1 2 3 4 5 if __name__ == &amp;#34;__main__&amp;#34;: assert recherche(1, [2, 3, 4]) == -1 assert recherche(1, [10, 12, 1, 56]) == 2 assert recherche(1, [1, 50, 1]) == 2 assert recherche(1, [8, 1, 10, 1, 7, 1, 8]) == 5 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def recherche(elt: int, tab: List[int]) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34; Retourne l’indice de la dernière occurrence de `elt` dans `tab` si `elt` est dans `tab` et le -1 sinon.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_21/</link>
      <pubDate>Sun, 21 Nov 2021 05:54:29 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_21/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction python appelée nb_repetitions qui prend en paramètres un élément elt et une liste tab et renvoie le nombre de fois où l’élément apparaît dans la liste.
Jeu de tests 1 2 3 4 if __name__ == &amp;#34;__main__&amp;#34;: assert nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5]) == 3 assert nb_repetitions(&amp;#39;A&amp;#39;, [&amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;R&amp;#39;]) == 2 assert nb_repetitions(12, [1, &amp;#39;! &amp;#39;, 7, 21, 36, 44]) == 0 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def nb_repetitions(elt: Union[int, float, str], tab: List) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34; Retourne le nombre de fois que elt apparaît dans tab.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_9/</link>
      <pubDate>Sun, 07 Nov 2021 04:57:44 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_9/</guid>
      <description>Exercice 1 (50% des points) Soit le couple (note, coefficient) :
note est un nombre de type flottant (float) compris entre 0 et 20 ; coefficient est un nombre entier positif. Les résultats aux évaluations d&amp;rsquo;un élève sont regroupés dans une liste composée de couples (note,coefficient). Écrire une fonction moyenne (accompagnée de sa spécification) qui renvoie la moyenne pondérée de cette liste donnée en paramètre. Par exemple, l’expression moyenne([(15, 2), (9, 1), (12, 3)]) devra renvoyer le résultat du calcul suivant : $$ \dfrac{2 \times 15 + 1 \times 9 + 3 \times 12}{2 + 1 + 3} = \pu{12,5} $$</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_10/</link>
      <pubDate>Wed, 27 Oct 2021 18:39:50 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_10/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction maxi qui prend en paramètre une liste tab de nombres entiers et renvoie un couple donnant le plus grand élément de cette liste, ainsi que l’indice de la première apparition de ce maximum dans la liste.
Remarque L&amp;rsquo;utilisation de la fonction max fournie avec le langage Python n&amp;rsquo;est pas autorisée. Exemple :
1 2 if __name__ == &amp;#34;__main__&amp;#34;: assert maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8]) == (9, 3) Exercice 2 (50% des points) Cet exercice utilise des piles qui seront représentées en Python par des listes (type list).</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_6/</link>
      <pubDate>Wed, 27 Oct 2021 17:34:19 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_6/</guid>
      <description>Exercice 1 (50% points) On s’intéresse au problème du rendu de monnaie. On suppose qu’on dispose d’un nombre infini de billets de 5 euros, de pièces de 2 euros et de pièces de 1 euro.
Le but est d’écrire une fonction nommée rendu dont le paramètre est un entier positif non nul somme_a_rendre et qui retourne une liste de trois entiers n1, n2 et n3 qui correspondent aux nombres de billets de 5 euros (n1) de pièces de 2 euros (n2) et de pièces de 1 euro (n3) à rendre afin que le total rendu soit égal à somme_a_rendre.</description>
    </item>
    
  </channel>
</rss>
