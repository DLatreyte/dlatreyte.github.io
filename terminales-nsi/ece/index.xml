<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Épreuves pratiques on Accueil</title>
    <link>https://dlatreyte.github.io/terminales-nsi/ece/</link>
    <description>Recent content in Épreuves pratiques on Accueil</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>david.latreyte@louismassignon.com (David Latreyte)</managingEditor>
    <webMaster>david.latreyte@louismassignon.com (David Latreyte)</webMaster>
    <lastBuildDate>Wed, 27 Oct 2021 17:49:14 +0400</lastBuildDate><atom:link href="https://dlatreyte.github.io/terminales-nsi/ece/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_13/</link>
      <pubDate>Wed, 12 Jan 2022 07:34:41 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_13/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction tri_selection qui prend en paramètre une liste tab de nombres entiers et qui renvoie le tableau trié par ordre croissant.
On utilisera l’algorithme suivant :
 on recherche le plus petit élément du tableau, et on l&amp;rsquo;échange avec l&amp;rsquo;élément d&amp;rsquo;indice 0 ; on recherche le second plus petit élément du tableau, et on l&amp;rsquo;échange avec l&amp;rsquo;élément d&amp;rsquo;indice 1 ; on continue de cette façon jusqu&amp;rsquo;à ce que le tableau soit entièrement trié.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_24/</link>
      <pubDate>Tue, 07 Dec 2021 07:57:06 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_24/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction recherche qui prend en paramètres elt un nombre et tab un tableau de nombres, et qui renvoie l’indice de la dernière occurrence de elt dans tab si elt est dans tab et le -1 sinon.
Jeu de tests possible 1 2 3 4 5  if __name__ == &amp;#34;__main__&amp;#34;: assert recherche(1, [2, 3, 4]) == -1 assert recherche(1, [10, 12, 1, 56]) == 2 assert recherche(1, [1, 50, 1]) == 2 assert recherche(1, [8, 1, 10, 1, 7, 1, 8]) == 5     Solution  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  def recherche(elt: int, tab: List[int]) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34; Retourne l’indice de la dernière occurrence de `elt` dans `tab` si `elt` est dans `tab` et le -1 sinon.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_21/</link>
      <pubDate>Sun, 21 Nov 2021 05:54:29 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_21/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction python appelée nb_repetitions qui prend en paramètres un élément elt et une liste tab et renvoie le nombre de fois où l’élément apparaît dans la liste.
Jeu de tests 1 2 3 4  if __name__ == &amp;#34;__main__&amp;#34;: assert nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5]) == 3 assert nb_repetitions(&amp;#39;A&amp;#39;, [&amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;R&amp;#39;]) == 2 assert nb_repetitions(12, [1, &amp;#39;! &amp;#39;, 7, 21, 36, 44]) == 0     Solution  1 2 3 4 5 6 7 8 9 10 11 12 13 14  def nb_repetitions(elt: Union[int, float, str], tab: List) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34; Retourne le nombre de fois que elt apparaît dans tab.</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_9/</link>
      <pubDate>Sun, 07 Nov 2021 04:57:44 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_9/</guid>
      <description>Exercice 1 (50% des points) Soit le couple (note, coefficient) :
 note est un nombre de type flottant (float) compris entre 0 et 20 ; coefficient est un nombre entier positif.  Les résultats aux évaluations d&amp;rsquo;un élève sont regroupés dans une liste composée de couples (note,coefficient). Écrire une fonction moyenne (accompagnée de sa spécification) qui renvoie la moyenne pondérée de cette liste donnée en paramètre. Par exemple, l’expression moyenne([(15, 2), (9, 1), (12, 3)]) devra renvoyer le résultat du calcul suivant : $$ \dfrac{2 \times 15 + 1 \times 9 + 3 \times 12}{2 + 1 + 3} = \pu{12,5} $$</description>
    </item>
    
    <item>
      <title>NUMERIQUE et SCIENCES INFORMATIQUES</title>
      <link>https://dlatreyte.github.io/terminales-nsi/ece/sujet_10/</link>
      <pubDate>Wed, 27 Oct 2021 18:39:50 +0400</pubDate>
      <author>david.latreyte@louismassignon.com (David Latreyte)</author>
      <guid>https://dlatreyte.github.io/terminales-nsi/ece/sujet_10/</guid>
      <description>Exercice 1 (50% des points) Écrire une fonction maxi qui prend en paramètre une liste tab de nombres entiers et renvoie un couple donnant le plus grand élément de cette liste, ainsi que l’indice de la première apparition de ce maximum dans la liste.
 Remarque L&amp;rsquo;utilisation de la fonction max fournie avec le langage Python n&amp;rsquo;est pas autorisée.  Exemple :
1 2  if __name__ == &amp;#34;__main__&amp;#34;: assert maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8]) == (9, 3)     Corrigé  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  from typing import List, Tuple def maxi(tab: List[int]) -&amp;gt; Tuple[int]: &amp;#34;&amp;#34;&amp;#34; Retourne le plus grand élément de cette liste, ainsi que l’indice de la première apparition de ce maximum dans la liste.</description>
    </item>
    
  </channel>
</rss>
